/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
import java.util.HashMap;
//import org.osgi.framework.BundleContext;
//import org.osgi.framework.ServiceReference;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.platforms.ILindaLike;
 
public class SupportFactory {
	public static final String connSetMsg ="setConnChannel"; //invitation
 	protected static HashMap<String,ConnProtIn> activePorts = new HashMap<String,ConnProtIn>();
 	private static boolean debug  =
		( System.getProperty("medclTrace") != null ) ?
		debug = System.getProperty("medclTrace").equals("set") : false;
  
	public static ILindaLike createConnOut(
			 String receiver, String msgId, String sender,  IOutputView view) throws Exception{
 throw new Exception("The system has no subject with connection port");
	}

	public static ILindaLike createInSupport(
				String receiver,String msgId, boolean withAnswer,IOutputView view ) throws Exception{
	if( RunTimeKb.worksWith( "TCP", receiver, msgId) ){
	 		//println(view,"createInSupport create a new TCP input for " + receiver+msgId );
		ILindaLike tcpS  = createTCPIn(receiver, msgId, withAnswer,view);
 			return tcpS;				
	}  
		throw new Exception("Protocol unknown");
	}


	public static ILindaLike createOutSupport(
				String receiver,String msgId, String sender, IOutputView view) throws Exception{
	if( RunTimeKb.worksWith( "TCP", receiver, msgId) ){
		println(view,"createOutSupport create a new TCP output support for " + receiver+msgId + " in " + sender);		
		ILindaLike tcpS = SupportFactory.createTCPOut(receiver, msgId, sender,view);
	 		RunTimeKb.addSubjectOutConnSupport(sender,  msgId, tcpS );
		return tcpS;				
	}
		throw new Exception("Protocol unknown");
	} 


    /*
   * TCP
   */ 
  	public static ILindaLike createTCPOut(
  			 String receiver,String msgId, String sender,  IOutputView view) throws Exception{	
     		ILindaLike sup  = new TcpOut(receiver,msgId,sender,view);
  		return sup;
  	}
  
   	public static synchronized ILindaLike createTCPIn(
  			String receiver, String msgId , boolean withAnswer,IOutputView view) throws Exception{
     		int portNum = RunTimeKb.getPortNum(receiver,msgId);
  		if( activePorts.get("TCP"+portNum) == null ){
  	   		println(view,"createNewTCPInSupport for " + receiver+"_"+msgId + " portNum =" + portNum);
    		   	TcpIn tcpR = new TcpIn( receiver, msgId, portNum, withAnswer,view);
   			activePorts.put("TCP"+portNum, tcpR);
  			RunTimeKb.addSubjectInConnSupport(receiver, msgId, tcpR );
  		 	tcpR.start();
  		}else{ //si usa una connessione già in atto (subject independent)			 
    			RunTimeKb.addSubjectInConnSupport(receiver, msgId, activePorts.get("TCP"+portNum) );
    		}
   		return  LindaLike.getSpace(view);
  	}
  
  /*
  * SERVICES	(Called by ConnProt)
  
   
  	public static IServiceTcp getTcpService( BundleContext context  ){
  		if( context != null ){
  			ServiceReference ref = context.getServiceReference( IServiceTcp.class.getName() );
  			IServiceTcp tcpServ = (IServiceTcp)context.getService(ref);
  			return tcpServ;
  		}			
  		else return new ServiceTcp();
  	}	
  */
	
/*
* UTILS	
*/
	
	protected static void println( IOutputView view, String msg){
		 if( debug ) 
			 doprintln(view,msg);
	}

	protected static void doprintln( IOutputView view, String msg){
		if( view != null )
			view.addOutput("    %%% SupportFactory "+ msg);
		else System.out.println( "    %%% SupportFactory " +  msg  );		
	}

}
