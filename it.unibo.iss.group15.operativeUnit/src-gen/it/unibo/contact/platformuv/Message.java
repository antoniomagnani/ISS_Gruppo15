/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
//package it.unibo.is.messages;
import it.unibo.is.interfaces.IMessage;
import alice.tuprolog.*;

public class Message extends BasicMessage implements IMessage{

	public Message( String functor, String arg0, String arg1, String arg2 ) throws Exception{
		this( functor+"("+arg0+",'"+arg1+"',"+arg2+")");
	}
	
	public Message( String functor, String arg0, String arg1, String arg2, String arg3 ) throws Exception{
		this( functor+"("+arg0+",'"+arg1+"',"+arg2+")", Integer.parseInt(arg3));
	}
	

	public Message( int msgNum, Term msg ){
		super( msgNum,msg ) ; 
	}

	public Message( String msg, int msgNum  ) throws Exception{
		super( msgNum, msg ) ;
	}
	
	public Message( String msg ) throws Exception{
		super( 0, msg ) ;
	}	
	
	public String msgEmitter(){ 
		String name = getContent( ((Struct) msg).getArg(0) );
		return name;
	}	
	 
	public String msgId(){ 
		return getContent( ((Struct) msg).getArg(1) );
	}	
	
	public String msgContent(){ 
		Term a2 = ((Struct) msg).getArg(2);
		String m = getContent( a2 );
		if(m.charAt(0)=='"') m = m.substring(1,m.length()-1); //Tolgo gli apici
		if(m.charAt(0)=='\'') m = m.substring(1,m.length()-1); //Tolgo gli apici
		try{
			Term.createTerm(m); //if is a term return as it is
			return m;
		}catch(Exception e){
			return "'"+m+"'";
		}
	}
	
	public String msgNum(){ 
		return getContent( ((Struct) msg).getArg(3) );
	}	
	
	public String toString(){
		String ms = msg.toString();
		return ms;
	}

	public String toStringAll(){
		String f = this.getMsgName();
		String c = this.getMsgContent();
		c=c.substring(0, c.lastIndexOf(")"));
		String mn = ""+this.getMsgSeqNum();
		String ms = c +","+ mn +")";
		return ms;
	}
	
	protected String getContent( Term t ){
		if( t instanceof Var ){
			Term refT = ((Var)t).getTerm();
			if(refT instanceof Struct && refT.match( Term.createTerm("envelope(X)") ))
				return ((Struct)refT).getArg(0).toString().replace("'", "\"");
			else return refT.toString();		
		}
		else if(t instanceof Struct && t.match( Term.createTerm("envelope(X)") ))
				return ((Struct)t).getArg(0).toString().replace("'", "\"");
			else return t.toString();
	}
}
