/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
import it.unibo.is.interfaces.IMessage;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.protocols.IConnInteraction;

import java.util.Vector;
import java.util.Iterator;
import it.unibo.is.interfaces.protocols.ITcpInteraction;

public abstract class ConnProtIn extends Thread{
	protected  Vector<IConnInteraction> curConns = new Vector<IConnInteraction>();
	protected  Vector<String> receivedMsgIds = new Vector<String>();

	protected boolean withAnswer;
	protected int portNum;
	protected String receiver;
	protected IOutputView view;
	protected boolean debug = false;
	protected String msgId;
	protected String portName ="ConnProtIn";
	
  public ConnProtIn(String portName, String receiver,String msgId,int portNum,boolean withAnswer,IOutputView view ){
	this.portName = portName;
	this.receiver   = receiver;
	this.msgId	    = msgId;
	this.portNum    = portNum;
	this.withAnswer	= withAnswer;
	this.view       = view;
	setName("ConnProtIn"+receiver);
 	if( System.getProperty("ConnProtIn") != null ) 
		debug = System.getProperty("ConnProtIn").equals("set") ;
  }
  
	public void run() {		
		waitForConnRequest();
	}		
		
	protected abstract void waitForRequest() throws Exception;
	protected abstract void handleException(Exception e)  ;
		
	protected void waitForConnRequest(){
	 	try {
			waitForRequest();
		} catch (Exception e) {
	 		handleException(e);
	 	}
	 	println( " ends" );
	}
 	

	public void terminate()  {
		if( curConns == null ){
			//doprintln("already terminated ");
			return; //already terminated
		}
		doprintln("terminate closing nconn=" + curConns.size() + " msgIdReceived=" + receivedMsgIds.size() );
 		Iterator<IConnInteraction> iter = curConns.iterator();
 		curConns = null;
		while( iter.hasNext() ){
		try {
			IConnInteraction conn = iter.next();
			conn.closeConnection();
			//doprintln(  "closed connection "   );
		} catch (Exception e) {
			doprintln("failure" + e.getMessage() );
		}
		}
 	}

	protected void println(String msg){
 	 if( debug ) 
	 	doprintln(msg);
	 }
		
	protected void doprintln(String msg){
		String m = "    *%%%*   "+ portName + " receiver=" + receiver+" on " + portNum + " "+msg ;
 		if( view != null ) view.addOutput(m);
		else System.out.println(m);		
	}	
}
