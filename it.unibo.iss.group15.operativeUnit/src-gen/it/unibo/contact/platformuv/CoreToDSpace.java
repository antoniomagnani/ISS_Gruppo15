/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
import java.util.Hashtable;
import java.util.Vector;
import it.unibo.contact.platformuv.AcquireOneReply;
import it.unibo.contact.platformuv.PlatformExpert;
import it.unibo.is.interfaces.IMessage;
import it.unibo.is.interfaces.IBasicMessage;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.platforms.IAcquireOneReply;
import it.unibo.is.interfaces.platforms.ILindaLike;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;

public class CoreToDSpace implements ILindaLike{
	protected static CoreToDSpace myself = null;
	//protected static Hashtable<String,Integer> globalSignalMemo = new Hashtable<String,Integer>();
	protected static int reqNum=0; //shared among all the instances of CoreToDSpace
	protected IOutputView view = null;
	protected boolean debug = false;
	protected String sender;
	protected String worker;
	
	public synchronized static CoreToDSpace getCoreToDSpace( String name, IOutputView view) throws Exception  {
		return new CoreToDSpace("coreToDSpace_"+name,view);
	}

	public CoreToDSpace( String name,IOutputView view) throws Exception {
 		worker = name;
 		this.view = view;
		String debugOn = System.getProperty("signalTrace");
		if( debugOn != null ) {
			debug = System.getProperty("signalTrace").equals("set") ;
		}
 	}

	@Override
	public void terminate() throws Exception {
	}

	@Override
	public IMessage in(String arg0) throws Exception {
		throw new Exception("CoreToDSpace does not support in");
	}
 
	@Override
	public Vector<IMessage> inMany(Vector<String> arg0) throws Exception {
		throw new Exception("CoreToDSpace does not support inMany");
	}

	@Override
	public void out(String msg) throws Exception {
 		String M1 ="cmd( out , "+ msg +")";
		//println("out " + M1 + " ReqN=" + reqNum);
		//hl_coreToDSpace_demandOUT_coreCmd_space( M1 ) ; //demand (old version)
		hl_coreToDSpace_forward_coreCmd_space( M1 );
	}

	@Override
	public IMessage rd(int globalLastMsgNum, String query) throws Exception {
		//Get the signalId from the query of type: signalId(ANY,signalId,M,N)
		//Struct tq = (Struct)Term.createTerm( query );
 		//String signalId = tq.getName();
		//int globalLastMsgNum = getGlobalTimeForQuery(signalId);
		println("queryTheSpace query="  +  query + " globalLastMsgNum=" + globalLastMsgNum);
		String M1 ="cmd( rd , "+ query + " , " + globalLastMsgNum + ")";
// 		println("rd " + M1  );
		IMessage am = myhl_coreToDSpace_demand_coreCmd_space(  M1, query, ++reqNum );
/*
 *  am has the form
 *   coreToDSpace_SenderId_space_coreCmd(space,coreCmd,envelope(Answer),reqNum)		
 */
		println("--- rd am= " + am );
		String answer = am.msgContent(); //
 		println("--- rd answer= " + answer   );
 		if(  answer == null ) throw new Exception("Error in CoreToDSpace coomunications" ); 
 		else if ( answer.contains("exception")){	
  			return null;
 		}			
		else{
			/*
			 * The Answer has form 
					dspaceAnswer(signal(Sender,SignalId,envelope("xxx"),SenderMsgNum),GT) 
				where GT is the global time of the signal
			 */
			IBasicMessage ba = new BasicMessage(answer);		
 			IMessage mm = new Message( ba.getMsgContent() );
 			int msgNum = ba.getMsgSeqNum() ;  
			String answerSignalId = mm.msgId();
			println("rd mm= " + mm + " answerSignalId" + answerSignalId + " msgNum=" + msgNum   );
  			return new Message( mm.getMsgContent(), msgNum );
		}
 	}

	public IMessage rdMostRecent(int globalLastMsgNum, String query) throws Exception {
		//Get the signalId from the query of type: signalId(ANY,signalId,M,N)
		//Struct tq = (Struct)Term.createTerm( query );
 		//String signalId = tq.getName();
		//int globalLastMsgNum = getGlobalTimeForQuery(signalId);
		println("queryTheSpace query="  +  query + " globalLastMsgNum=" + globalLastMsgNum);
		String M1 ="cmd( rdMostRecent , "+ query + " , " + globalLastMsgNum + ")";
// 		println("rd " + M1  );
		IMessage am = myhl_coreToDSpace_demand_coreCmd_space(  M1, query, ++reqNum );
/*
 *  am has the form
 *   coreToDSpace_SenderId_space_coreCmd(space,coreCmd,envelope(Answer),reqNum)		
 */
		println("--- rd am= " + am );
		String answer = am.msgContent(); //
 		println("--- rd answer= " + answer   );
 		if(  answer == null ) throw new Exception("Error in CoreToDSpace coomunications" ); 
 		else if ( answer.contains("exception")){	
  			return null;
 		}			
		else{
			/*
			 * The Answer has form 
					dspaceAnswer(signal(Sender,SignalId,envelope("xxx"),SenderMsgNum),GT) 
				where GT is the global time of the signal
			 */
			IBasicMessage ba = new BasicMessage(answer);		
  			IMessage mm = new Message( ba.getMsgContent() );
 			int msgNum = ba.getMsgSeqNum() ;  
			String answerSignalId = mm.msgId();
			println("rd mm= " + mm + " answerSignalId" + answerSignalId + " msgNum=" + msgNum   );
  			return new Message( mm.getMsgContent(), msgNum );
		}
	}

	@Override
	public IMessage select(String subjName,Hashtable<String, Integer> arg0,
			java.util.List<IMessage> arg1) throws Exception {
		throw new Exception("CoreToDSpace does not support select");
	}
	@Override
	public IMessage selectMostRecent(
		 String subjName, Hashtable<String,Integer> lastMsgRdMemo, java.util.List<IMessage> queries ) throws Exception {
		throw new Exception("CoreToDSpace does not support selectOneMessageMostRecent");
	}
	
	
	@Override
	public IMessage rdw(int globalLastMsgNum, String query) throws Exception {
		//Get the signalId from the query of type: signalId(ANY,signalId,M,N)
		//Struct tq = (Struct)Term.createTerm( query );
 		//String signalId = tq.getName();
		//int globalLastMsgNum = getGlobalTimeForQuery(signalId);
		println("queryTheSpace query="  +  query + " globalLastMsgNum=" + globalLastMsgNum);
		String M1 ="cmd( rdw , "+ query + " , " + globalLastMsgNum + ")";
// 		println("rdw " + M1  );
		IMessage am = myhl_coreToDSpace_demand_coreCmd_space(  M1, query, ++reqNum );
/*
 *  am has the form
 *   coreToDSpace_SenderId_space_coreCmd(space,coreCmd,envelope(Answer),reqNum)		
 */
		println("--- rdw am= " + am );
		String answer = am.msgContent(); //
 		println("--- rdw answer= " + answer   );
 		if(  answer == null ) throw new Exception("Error in CoreToDSpace coomunications" ); 
 		else if ( answer.contains("exception")){	
			/*
			 * The Answer is a local (no contact) message of the form 
					exception(timeOut)
			 */
 			throw new Exception(answer);
 		}			
		else{
			/*
			 * The Answer has form 
					dspaceAnswer(signal(Sender,SignalId,envelope("xxx"),SenderMsgNum),GT) 
				where GT is the global time of the signal
			 */
			IBasicMessage ba = new BasicMessage(answer);		
  			IMessage mm = new Message( ba.getMsgContent() );
 			int msgNum = ba.getMsgSeqNum() ;  
			String answerSignalId = mm.msgId();
			println("rdw mm= " + mm + " answerSignalId" + answerSignalId + " msgNum=" + msgNum   );
  			return new Message( mm.getMsgContent(), msgNum );
		}
	}	
	
	@Override
	public IMessage rdwMostRecent(int globalLastMsgNum, String query) throws Exception {
		println("queryTheSpace query="  +  query + " globalLastMsgNum=" + globalLastMsgNum);
		String M1 ="cmd( rdwMostRecent , "+ query + " , " + globalLastMsgNum + ")";
// 		println("rdwMostRecent " + M1  );
		IMessage am = myhl_coreToDSpace_demand_coreCmd_space(  M1, query, ++reqNum );
/*
 *  am has the form
 *   coreToDSpace_SenderId_space_coreCmd(space,coreCmd,envelope(Answer),reqNum)		
 */
		println("--- rdw am= " + am );
		String answer = am.msgContent(); //
 		println("--- rdw answer= " + answer   );
 		if(  answer == null ) throw new Exception("Error in CoreToDSpace coomunications" ); 
 		else if ( answer.contains("exception")){	
			/*
			 * The Answer is a local (no contact) message of the form 
					exception(timeOut)
			 */
 			throw new Exception(answer);
 		}			
		else{
			/*
			 * The Answer has form 
					dspaceAnswer(signal(Sender,SignalId,envelope("xxx"),SenderMsgNum),GT) 
				where GT is the global time of the signal
			 */
			IBasicMessage ba = new BasicMessage(answer);		
  			IMessage mm = new Message( ba.getMsgContent() );
 			int msgNum = ba.getMsgSeqNum() ;  
			String answerSignalId = mm.msgId();
			println("rdw mm= " + mm + " answerSignalId" + answerSignalId + " msgNum=" + msgNum   );
  			return new Message( mm.getMsgContent(), msgNum );
		}
	}
	
	protected void println(String msg){
		if( debug )
		if( view != null ) view.addOutput("*** CoreToDSpace "+msg);
		else 
			System.out.println("*** CoreToDSpace "+msg);
	}

 	protected IMessage myhl_coreToDSpace_demand_coreCmd_space(String M, String query, int myReqNum ) throws Exception
	{ if( M.length() == 0 ) throw new Exception("A message string cannot be empty");
 		ILindaLike comSup =  PlatformExpert.findOutSupport("space", "coreCmd" ,worker,view);
		System.out.println("+++++++  SENDING " + M +  " / " + myReqNum);
   		comSup.out("space_coreCmd("+worker+",coreCmd,"+ M +","+ myReqNum +")");
	   	final IAcquireOneReply answer = new AcquireOneReply("coreToDSpace_"+worker,"space","setConnChannel",
			LindaLike.getSpace(),worker+"_space_coreCmd(space,coreCmd,ANYM,"+myReqNum+")",view);
			IMessage am = answer.acquireReply(); //CONSUME! blocking:we could insert a timeout 
			System.out.println("	*** answer to OUT " + am );	   			
			return am;
	   	/*
	   	 * ESEMPIO DI RISPOSTA CHE ARRIVA
	   	coreToDSpace_s3_space_coreCmd(space,coreCmd,
	   			envelope('	dspaceAnswer(e1(s1,e1,	envelope("signal e1 "),	1),6)   '),0) 	
	   	 */
	}

	protected void hl_coreToDSpace_forward_coreCmd_space( String M  ) throws Exception {
	int myReqNum = ++reqNum ;
	if( M.length() == 0 ) throw new Exception("A message string cannot be empty");
 		ILindaLike comSup =  PlatformExpert.findOutSupport("space", "coreCmd" ,worker,view);
		System.out.println("+++++++  SENDING " + M );
   		comSup.out("space_coreCmd("+worker+",coreCmd,"+ M +","+ myReqNum +")");
	}


/* 
//coreCond as request (obsolete)
	protected void hl_coreToDSpace_demandOUT_coreCmd_space(String M ) throws Exception{
	int myReqNum = ++reqNum ;
	if( M.length() == 0 ) throw new Exception("A message string cannot be empty");
 		ILindaLike comSup =  PlatformExpert.findOutSupport("space", "coreCmd" ,worker,view);
		System.out.println("+++++++  SENDING " + M );
   		comSup.out("space_coreCmd("+worker+",coreCmd,"+ M +","+ myReqNum +")");
		final IAcquireOneReply answer = new AcquireOneReply(getName(),"space","setConnChannel",
			LindaLike.getSpace(),worker+"_space_coreCmd(space,coreCmd,ANYM,"+myReqNum+")",view);
	   	new Thread(){ //To avoid the blocking of the subject
	   		public void run(){
	   			IMessage am;
				try {
					am = answer.acquireReply(); //CONSUME! blocking:we could insert a timeout 
		   			System.out.println("	*** answer to OUT " + am );	   			
			} catch (Exception e) {
 					e.printStackTrace();
			} 
	   		}
	   	}.start();
	}
*/
}
